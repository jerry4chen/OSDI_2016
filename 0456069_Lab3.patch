diff --exclude='.g*' -Naur lab3/boot/boot.S ../nctuos/boot/boot.S
--- lab3/boot/boot.S	2016-04-05 21:10:01.011080570 +0800
+++ ../nctuos/boot/boot.S	2016-04-06 20:06:01.416550227 +0800
@@ -60,28 +60,13 @@
 #       easy-to-use macro when defining segmentation type.
 
 	SEG_NULL    # NULL segment
-	SEG(STA_X, 0x0, 0xffffffff)     # Kernel code segment
-	SEG(STA_W, 0x0, 0xffffffff)     # Kernel data segment
-
+	//SEG()     # Kernel code segment
+//	SEG()     # Kernel data segment
 
 # TODO: Please fillup the GDT register for gdt in order to used
 #       with "lgdt" instruction.
 # Note: You can reference lab3_reference page 13 for detail meaning
 #       of each bit of GDT register.
 gdtdesc: 
-	.word 256*8-1	# gdt limit
-	.long gdt	# gdt base
-
-	# refer the linux-0.11
-        #.word 256*8-1           # so does gdt (not that that's any
-        #.long gdt               # magic number, but it works for me :^)
-
-        #.align 8
-#idt:    .fill 256,8,0           # idt is uninitialized
-
-#gdt:    .quad 0x0000000000000000        /* NULL descriptor */
-#        .quad 0x00c09a0000000fff        /* 16Mb */
-#        .quad 0x00c0920000000fff        /* 16Mb */
-#        .quad 0x0000000000000000        /* TEMPORARY - don't use */
-#        .fill 252,8,0                   /* space for LDT's and TSS's etc */
-
+	.word	# gdt limit
+	.word	# gdt base
diff --exclude='.g*' -Naur lab3/inc/shell.h ../nctuos/inc/shell.h
--- lab3/inc/shell.h	2016-04-06 01:27:46.240179450 +0800
+++ ../nctuos/inc/shell.h	2016-03-23 18:47:51.000000000 +0800
@@ -5,5 +5,5 @@
 int mon_help(int argc, char **argv);
 int mon_kerninfo(int argc, char **argv);
 int print_tick(int argc, char **argv);
-int chgcolor(int argc, char *argv[]);
+
 #endif
diff --exclude='.g*' -Naur lab3/kernel/kbd.c ../nctuos/kernel/kbd.c
--- lab3/kernel/kbd.c	2016-04-04 19:01:27.779445042 +0800
+++ ../nctuos/kernel/kbd.c	2016-03-23 18:47:51.000000000 +0800
@@ -216,9 +216,6 @@
 	cons_intr(kbd_proc_data);
 }
 
-/*
- *  0456069visited 
- */
 void kbd_init(void)
 {
 	// Drain the kbd buffer so that Bochs generates interrupts.
diff --exclude='.g*' -Naur lab3/kernel/kern.ld ../nctuos/kernel/kern.ld
--- lab3/kernel/kern.ld	2016-04-05 23:40:23.024971654 +0800
+++ ../nctuos/kernel/kern.ld	2016-03-23 18:47:51.000000000 +0800
@@ -41,16 +41,12 @@
 	/* Adjust the address for the data segment to the next page */
 	. = ALIGN(0x1000);
 
-
-	  PROVIDE(DATASEG = .);	
 	/* The data segment */
 	.data : {
-		*(.data);
-		
+		*(.data)
 	}
-	PROVIDE(BSS = .);
 	.bss : {
-		*(.bss);
+		*(.bss)
 	}
 	PROVIDE(end = .);
 
diff --exclude='.g*' -Naur lab3/kernel/main.c ../nctuos/kernel/main.c
--- lab3/kernel/main.c	2016-04-06 20:45:56.747255804 +0800
+++ ../nctuos/kernel/main.c	2016-04-06 20:08:09.877534465 +0800
@@ -12,12 +12,12 @@
 	init_video();
 
 	pic_init();
-
   /* TODO: You should uncomment them
    */
-	kbd_init();
+	 kbd_init();
 	 timer_init();
 	 trap_init();
+
 	/* Enable interrupt */
 	__asm __volatile("sti");
 
diff --exclude='.g*' -Naur lab3/kernel/shell.c ../nctuos/kernel/shell.c
--- lab3/kernel/shell.c	2016-04-06 20:49:21.757230603 +0800
+++ ../nctuos/kernel/shell.c	2016-03-23 18:47:51.000000000 +0800
@@ -3,9 +3,6 @@
 #include <inc/shell.h>
 #include <inc/timer.h>
 
-
-extern void settextcolor(unsigned char forecolor, unsigned char backcolor);
-
 struct Command {
 	const char *name;
 	const char *desc;
@@ -16,9 +13,7 @@
 static struct Command commands[] = {
 	{ "help", "Display this list of commands", mon_help },
 	{ "kerninfo", "Display information about the kernel", mon_kerninfo },
-	{ "print_tick", "Display system tick", print_tick },
-	{ "chgcolor", "Change the display's color",chgcolor}
-	
+	{ "print_tick", "Display system tick", print_tick }
 };
 #define NCOMMANDS (sizeof(commands)/sizeof(commands[0]))
 
@@ -26,6 +21,7 @@
 int mon_help(int argc, char **argv)
 {
 	int i;
+
 	for (i = 0; i < NCOMMANDS; i++)
 		cprintf("%s - %s\n", commands[i].name, commands[i].desc);
 	return 0;
@@ -33,19 +29,12 @@
 
 int mon_kerninfo(int argc, char **argv)
 {
-
-
 	/* TODO: Print the kernel code and data section size 
    * NOTE: You can count only linker script (kernel/kern.ld) to
    *       provide you with those information.
    *       Use PROVIDE inside linker script and calculate the
    *       offset.
    */
-	extern char _start[], end[], etext[], __STABSTR_END__[], __STABSTR_BEGIN__[], __STAB_END__[], __STAB_BEGIN__[], BSS[], DATASEG[];  
-  
-	cprintf("Kernel Code base start = %0x size = %d\n", _start, etext - _start );  
-    	cprintf("Kernel Data base start = %0x size = %d\n", DATASEG, end- DATASEG);
-	cprintf("kernel exe memory footprint: %dKB\n",(end - _start)/1024);
 	return 0;
 }
 int print_tick(int argc, char **argv)
@@ -53,23 +42,6 @@
 	cprintf("Now tick = %d\n", get_tick());
 }
 
-int chgcolor(int argc, char **argv)
-{
-	if(argc == 2) {
-	
-	unsigned char input = *argv[1]-'0';
-
-	//ex: chgcolor f -> Change color 54!\n
-	if(input==0){settextcolor((unsigned char)input,255);}
-	else{	settextcolor((unsigned char)input,16);}
-	cprintf("Change color %d! \n",input);
-	
-	}
-	else{ 
-	cprintf("chgcolor argument error\n");
-}
-}
-
 #define WHITESPACE "\t\r\n "
 #define MAXARGS 16
 
diff --exclude='.g*' -Naur lab3/kernel/trap.c ../nctuos/kernel/trap.c
--- lab3/kernel/trap.c	2016-04-05 21:42:03.240844178 +0800
+++ ../nctuos/kernel/trap.c	2016-03-23 18:47:51.000000000 +0800
@@ -1,12 +1,7 @@
+#include <kernel/trap.h>
 #include <inc/mmu.h>
 #include <inc/x86.h>
 
-#include<inc/kbd.h>
-#include<inc/timer.h>
-#include<inc/stdio.h>
-#include<kernel/trap.h>
-#include<inc/shell.h>
-
 /* For debugging, so print_trapframe can distinguish between printing
  * a saved trapframe and printing the current trapframe and print some
  * additional information in the latter case.
@@ -20,22 +15,7 @@
  *       Interrupt descriptor table must be built at run time because shifted
  *       function addresses can't be represented in relocation records.
  */
-struct Gatedesc idt[256] = {{0}};
-struct Pseudodesc idt_pd = {
-    sizeof(idt) - 1, (uint32_t) idt    
-};
-
-/*
-struct Gatedesc  idt[256] = {{0}};
-struct Psuedodesc idt_pd = {sizeof(idt)-1, (uint32_t) idt};
-
-*/
-//
-// Psuedodesc : 
-//struct Pseudodesc {
-//         uint16_t pd_lim;                // Limit
-//         uint32_t pd_base;               // Base address
-//} __attribute__ ((packed));		// NO alignment 
+
 
 /* For debugging */
 static const char *trapname(int trapno)
@@ -116,30 +96,13 @@
 	cprintf("  oesp 0x%08x\n", regs->reg_oesp);
 	cprintf("  ebx  0x%08x\n", regs->reg_ebx);
 	cprintf("  edx  0x%08x\n", regs->reg_edx);
-	cprintf("  ecx  0x%08x\n", regs->reg_ecx);	
+	cprintf("  ecx  0x%08x\n", regs->reg_ecx);
 	cprintf("  eax  0x%08x\n", regs->reg_eax);
 }
 
 static void
 trap_dispatch(struct Trapframe *tf)
 {
-	switch(tf->tf_trapno){
-	case IRQ_OFFSET+IRQ_KBD :
-		//shell();
-	//	cprintf("IRQ_KBD\n");	
-		kbd_intr();
-		//shell();	
-		break;
-	case IRQ_OFFSET+IRQ_TIMER:
-		//shell();
-	//	cprintf("IRQ_TIMER\n");
-		timer_handler();
-		break;
-
-	default:
-		print_trapframe(tf);
-	//	cprintf("0456069's trap_dispatch\n");
-	}	
   /* TODO: Handle specific interrupts.
    *       You need to check the interrupt number in order to tell
    *       which interrupt is currently happening since every interrupt
@@ -156,7 +119,7 @@
    */
 
 	// Unexpected trap: The user process or the kernel has a bug.
-//	print_trapframe(tf);
+	print_trapframe(tf);
 }
 
 /* 
@@ -175,10 +138,6 @@
 
 void trap_init()
 {
-
-	extern void irq0_entry();
-	extern void irq1_entry();
-
   /* TODO: You should initialize the interrupt descriptor table.
    *       You should setup at least keyboard interrupt and timer interrupt as
    *       the lab's requirement.
@@ -200,14 +159,9 @@
    *       There is a data structure called Pseudodesc in mmu.h which might
    *       come in handy for you when filling up the argument of "lidt"
    */
-	//SETGATE(gate, istrap, sel, off, dpl)   
-	
+
 	/* Keyboard interrupt setup */
-	SETGATE(idt[IRQ_OFFSET+IRQ_KBD],0,GD_KT,irq1_entry,0);
 	/* Timer Trap setup */
-	SETGATE(idt[IRQ_OFFSET+IRQ_TIMER],0,GD_KT,irq0_entry,0);
   /* Load IDT */
-	lidt(&idt_pd);
-//	asm volatile("lidt idt_pd");
-	//lgdt();
+
 }
diff --exclude='.g*' -Naur lab3/kernel/trap_entry.S ../nctuos/kernel/trap_entry.S
--- lab3/kernel/trap_entry.S	2016-04-06 00:11:19.161743310 +0800
+++ ../nctuos/kernel/trap_entry.S	2016-03-23 18:47:51.000000000 +0800
@@ -23,10 +23,6 @@
  *       when declaring interface for ISRs.
  */
 
-TRAPHANDLER_NOEC(irq0_entry,IRQ_OFFSET+IRQ_TIMER);
-TRAPHANDLER_NOEC(irq1_entry,IRQ_OFFSET+IRQ_KBD);
-
-
 .globl default_trap_handler;
 _alltraps:
   /* TODO: Since we are going to call default_trap_handler, we have to prepare
@@ -40,22 +36,10 @@
    *       You may want to leverage the "pusha" instructions to reduce your work of
    *       pushing all the general purpose registers into the stack.
 	 */
-	
-	pushl %ds
-    	pushl %es
-    	pusha
-    	pushl %esp
-    	call default_trap_handler
-    	popl %esp
-    	popa
-    	popl %es
-    	popl %ds
-    	add  $8, %esp
-   	iret
-	
-	#pushl %esp # Pass a pointer which points to the Trapframe as an argument to default_trap_handler()
-	#call default_trap_handler
 
-	#add $8, %esp # Cleans up the pushed error code and pushed ISR number
-	#iret # pops 5 things at once: CS, EIP, EFLAGS, SS, and ESP!
+	pushl %esp # Pass a pointer which points to the Trapframe as an argument to default_trap_handler()
+	call default_trap_handler
+
+	add $8, %esp # Cleans up the pushed error code and pushed ISR number
+	iret # pops 5 things at once: CS, EIP, EFLAGS, SS, and ESP!
 
diff --exclude='.g*' -Naur lab3/kernel/trap.h ../nctuos/kernel/trap.h
--- lab3/kernel/trap.h	2016-04-04 20:03:17.834988997 +0800
+++ ../nctuos/kernel/trap.h	2016-03-23 18:47:51.000000000 +0800
@@ -15,4 +15,6 @@
 void print_regs(struct PushRegs *regs);
 void print_trapframe(struct Trapframe *tf);
 //void page_fault_handler(struct Trapframe *);
+void backtrace(struct Trapframe *);
+
 #endif /* JOS_KERN_TRAP_H */
diff --exclude='.g*' -Naur lab3/readme.md ../nctuos/readme.md
--- lab3/readme.md	2016-03-29 00:31:44.843538428 +0800
+++ ../nctuos/readme.md	2016-03-23 18:47:51.000000000 +0800
@@ -16,7 +16,7 @@
 
 To run this kernel
 
-    $ make all
+    $ make
     $ qemu -hda kernel.img -monitor stdio
 
 - Modify `boot/boot.S` to setup GDT
